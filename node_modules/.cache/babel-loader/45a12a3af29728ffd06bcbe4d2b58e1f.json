{"ast":null,"code":"// const redux = require(\"redux\");\n//now itself will integrate redux no need to call seperately\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\"; //this is a reducer() which will be called for manipulating the states in the store\n//this function is called by components using dispatch method\n//also called when the store is initialised\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: false\n}; //here instead of a big state object we create slices of related or dependent states alsoreducer functions shortend\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    //we pass all the reducing functions here in this object\n    Increment: state => {\n      state.counter++; //can mutate the previous state as toolkit  will handle it accordingly\n      //no need to again define other states and return a new object as it will merge this to them\n    },\n\n    Decrement(state) {\n      state.counter--;\n    },\n\n    //here when we dispatch this action we will pass another argument which will come here as below\n    Increase(state, action) {\n      state.counter += action.payload;\n    },\n\n    Toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // function counterReducer(state = defaultState, action) {\n//   if (action.type === \"Increment\")\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   if (action.type === \"Decrement\")\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   if (action.type === \"Increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"Toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// }\n\nconst authSlice = createSlice({\n  name: \"Authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login: state => {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  //more slices more reducer()'s then we will pass all reducers in a object and store will connect to all slices\n  reducer: {\n    Counter: counterSlice.reducer,\n    Auth: authSlice.reducer\n  }\n}); // const counterStore = redux.createStore(counterReducer);//here we made the store to store states(in a state object)\n//this is a subscriber() which will be called everytime when store states changes\n// function counterSubscriber() {\n//   const latestState = counterStore.getState();\n//   console.log(latestState);\n// }\n//here we subscribed this function(component) to store\n// counterStore.subscribe(counterSubscriber);\n\nfunction storeSubscriber() {\n  const latestState = store.getState();\n  console.log(latestState.Counter.counter, latestState.Counter.showCounter);\n}\n\nstore.subscribe(storeSubscriber); //now in the components which will call dispatch() we don't need to create a object give it type and all by self\n// and then pass it instead we will call the function provided in the slice's reducers object as 'counterActions.increment'\n// in the dispatch function argument and it will automatically create a required object to call that required ()\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","counterSlice","name","initialState","reducers","Increment","state","Decrement","Increase","action","payload","Toggle","authSlice","login","logout","store","reducer","Counter","Auth","storeSubscriber","latestState","getState","console","log","subscribe","counterActions","actions","authActions"],"sources":["D:/web/react.js/Redux(counter)/src/store/appStore.js"],"sourcesContent":["// const redux = require(\"redux\");\r\n//now itself will integrate redux no need to call seperately\r\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//this is a reducer() which will be called for manipulating the states in the store\r\n//this function is called by components using dispatch method\r\n//also called when the store is initialised\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\nconst initialAuthState = { isAuthenticated: false };\r\n\r\n//here instead of a big state object we create slices of related or dependent states alsoreducer functions shortend\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    //we pass all the reducing functions here in this object\r\n    Increment: (state) => {\r\n      state.counter++; //can mutate the previous state as toolkit  will handle it accordingly\r\n      //no need to again define other states and return a new object as it will merge this to them\r\n    },\r\n    Decrement(state) {\r\n      state.counter--;\r\n    },\r\n    //here when we dispatch this action we will pass another argument which will come here as below\r\n    Increase(state, action) {\r\n      state.counter += action.payload;\r\n    },\r\n    Toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// function counterReducer(state = defaultState, action) {\r\n//   if (action.type === \"Increment\")\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   if (action.type === \"Decrement\")\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   if (action.type === \"Increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"Toggle\") {\r\n//     return {\r\n//       counter: state.counter,\r\n//       showCounter: !state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// }\r\nconst authSlice = createSlice({\r\n  name: \"Authentication\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login: (state) => {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  //more slices more reducer()'s then we will pass all reducers in a object and store will connect to all slices\r\n  reducer: {\r\n    Counter: counterSlice.reducer,\r\n    Auth: authSlice.reducer,\r\n  },\r\n});\r\n// const counterStore = redux.createStore(counterReducer);//here we made the store to store states(in a state object)\r\n\r\n//this is a subscriber() which will be called everytime when store states changes\r\n// function counterSubscriber() {\r\n//   const latestState = counterStore.getState();\r\n//   console.log(latestState);\r\n// }\r\n\r\n//here we subscribed this function(component) to store\r\n// counterStore.subscribe(counterSubscriber);\r\n\r\nfunction storeSubscriber() {\r\n  const latestState = store.getState();\r\n  console.log(latestState.Counter.counter, latestState.Counter.showCounter);\r\n}\r\nstore.subscribe(storeSubscriber);\r\n\r\n//now in the components which will call dispatch() we don't need to create a object give it type and all by self\r\n// and then pass it instead we will call the function provided in the slice's reducers object as 'counterActions.increment'\r\n// in the dispatch function argument and it will automatically create a required object to call that required ()\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C,C,CAEA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAnB,CAAzB,C,CAEA;;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SADyB;EAE/BC,YAAY,EAAEP,mBAFiB;EAG/BQ,QAAQ,EAAE;IACR;IACAC,SAAS,EAAGC,KAAD,IAAW;MACpBA,KAAK,CAACT,OAAN,GADoB,CACH;MACjB;IACD,CALO;;IAMRU,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACT,OAAN;IACD,CARO;;IASR;IACAW,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACT,OAAN,IAAiBY,MAAM,CAACC,OAAxB;IACD,CAZO;;IAaRC,MAAM,CAACL,KAAD,EAAQ;MACZA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACR,WAA3B;IACD;;EAfO;AAHqB,CAAD,CAAhC,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMc,SAAS,GAAGjB,WAAW,CAAC;EAC5BO,IAAI,EAAE,gBADsB;EAE5BC,YAAY,EAAEJ,gBAFc;EAG5BK,QAAQ,EAAE;IACRS,KAAK,EAAGP,KAAD,IAAW;MAChBA,KAAK,CAACN,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAIRc,MAAM,CAACR,KAAD,EAAQ;MACZA,KAAK,CAACN,eAAN,GAAwB,KAAxB;IACD;;EANO;AAHkB,CAAD,CAA7B;AAaA,MAAMe,KAAK,GAAGrB,cAAc,CAAC;EAC3B;EACAsB,OAAO,EAAE;IACPC,OAAO,EAAEhB,YAAY,CAACe,OADf;IAEPE,IAAI,EAAEN,SAAS,CAACI;EAFT;AAFkB,CAAD,CAA5B,C,CAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,SAASG,eAAT,GAA2B;EACzB,MAAMC,WAAW,GAAGL,KAAK,CAACM,QAAN,EAApB;EACAC,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACH,OAAZ,CAAoBpB,OAAhC,EAAyCuB,WAAW,CAACH,OAAZ,CAAoBnB,WAA7D;AACD;;AACDiB,KAAK,CAACS,SAAN,CAAgBL,eAAhB,E,CAEA;AACA;AACA;;AACA,OAAO,MAAMM,cAAc,GAAGxB,YAAY,CAACyB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGf,SAAS,CAACc,OAA9B;AACP,eAAeX,KAAf"},"metadata":{},"sourceType":"module"}