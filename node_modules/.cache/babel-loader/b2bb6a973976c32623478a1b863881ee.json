{"ast":null,"code":"const redux = require(\"redux\"); //this is a reducer() which will be called for manipulating the states in the store \n//this function is called by components using dispatch method \n//also called when the store is initialised\n\n\nfunction counterReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    counter: 0\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'Increment') return {\n    counter: state.counter + 1\n  };\n  if (action.type === 'Decrement') return {\n    counter: state.counter - 1\n  };\n\n  if (action.type === 'Increase') {\n    return {\n      counter: state.counter + action.amount\n    };\n  }\n\n  return state;\n} //here we made the store to store states(in a state object)\n\n\nconst counterStore = redux.createStore(counterReducer); //this is a subscriber() which will be called everytime when store states changes\n\nfunction counterSubscriber() {\n  const latestState = counterStore.getState();\n  console.log(latestState);\n} //here we subscribed this function(component) to store \n\n\ncounterStore.subscribe(counterSubscriber);\nexport default counterStore;","map":{"version":3,"names":["redux","require","counterReducer","state","counter","action","type","amount","counterStore","createStore","counterSubscriber","latestState","getState","console","log","subscribe"],"sources":["D:/web/react.js/Redux(counter)/src/store/counterStore.js"],"sourcesContent":["const redux = require(\"redux\");\r\n\r\n//this is a reducer() which will be called for manipulating the states in the store \r\n//this function is called by components using dispatch method \r\n//also called when the store is initialised\r\nfunction counterReducer(state = { counter: 0 }, action) {\r\n\r\n  if(action.type==='Increment')\r\n    return {\r\n    counter: state.counter + 1,\r\n  };\r\n  if(action.type==='Decrement')\r\n  return {\r\n    counter: state.counter - 1,\r\n  };\r\n  if(action.type==='Increase'){\r\n    return {\r\n      counter:state.counter+action.amount,\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\n//here we made the store to store states(in a state object)\r\nconst counterStore = redux.createStore(counterReducer); \r\n\r\n//this is a subscriber() which will be called everytime when store states changes\r\nfunction counterSubscriber(){\r\n    const latestState=counterStore.getState();\r\n    console.log(latestState);\r\n}\r\n\r\n//here we subscribed this function(component) to store \r\ncounterStore.subscribe(counterSubscriber);\r\n\r\n\r\nexport default counterStore;\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CAEA;AACA;AACA;;;AACA,SAASC,cAAT,GAAwD;EAAA,IAAhCC,KAAgC,uEAAxB;IAAEC,OAAO,EAAE;EAAX,CAAwB;EAAA,IAARC,MAAQ;EAEtD,IAAGA,MAAM,CAACC,IAAP,KAAc,WAAjB,EACE,OAAO;IACPF,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;EADlB,CAAP;EAGF,IAAGC,MAAM,CAACC,IAAP,KAAc,WAAjB,EACA,OAAO;IACLF,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;EADpB,CAAP;;EAGA,IAAGC,MAAM,CAACC,IAAP,KAAc,UAAjB,EAA4B;IAC1B,OAAO;MACLF,OAAO,EAACD,KAAK,CAACC,OAAN,GAAcC,MAAM,CAACE;IADxB,CAAP;EAGD;;EAED,OAAOJ,KAAP;AACD,C,CAED;;;AACA,MAAMK,YAAY,GAAGR,KAAK,CAACS,WAAN,CAAkBP,cAAlB,CAArB,C,CAEA;;AACA,SAASQ,iBAAT,GAA4B;EACxB,MAAMC,WAAW,GAACH,YAAY,CAACI,QAAb,EAAlB;EACAC,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACH,C,CAED;;;AACAH,YAAY,CAACO,SAAb,CAAuBL,iBAAvB;AAGA,eAAeF,YAAf"},"metadata":{},"sourceType":"module"}